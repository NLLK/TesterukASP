@{
    ViewBag.Title = "Тест";
}
<div id="left" class="position">
    <h2>Нужна помощь с тестами? Обратитесь к обучающим материалам.</h2>
    <!-- Кнопки для открытия модальных окон -->
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#studyMaterialsAccessModifiers">Модификаторы доступа в C#</button>
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#studyMaterialsOOPPrinciples">Основные принципы ООП</button>
    <br>
    <br>
    <br>
    <form onSubmit="countScore('@ViewBag.IdUser',4)" action="~/UserAccount" method="post">
        <h3>Тест по C#.</h3>
        <p><b>Что делает модификатор sealed?</b></p>
        <p><input type="radio" name="q1" value="0" checked> Ограничивает видимость текущей сборкой </p>
        <p><input type="radio" name="q1" value="1"> Запрещает наследование</p>
        <p><input type="radio" name="q1" value="0"> Разрешает наследование только один раз</p>
        <p><input type="radio" name="q1" value="0"> Добавляется просто для наглядности, но ничего не изменяет </p>

        <p><b>Выполнится ли блок finally, если исключения не было?</b></p>
        <p><input type="radio" name="q2" value="0" checked> Зависит от режима работы</p>
        <p><input type="radio" name="q2" value="1"> Да </p>
        <p><input type="radio" name="q2" value="0"> Нет </p>
        <p><input type="radio" name="q2" value="0"> Зависит от кода </p>

        <p><b>Можно ли сделать перегрузку операторов true и false?</b></p>
        <p><input type="radio" name="q3" value="0" checked> Нет</p>
        <p><input type="radio" name="q3" value="1"> Да</p>

        <p><b>Какой способ вызова исключения является корректным?</b></p>
        <p><input type="radio" name="q4" value="0" checked> throw Exception(); </p>
        <p><input type="radio" name="q4" value="0">  new Exception(); </p>
        <p><input type="radio" name="q4" value="1">  throw new Exception(); </p>
        <p><input type="radio" name="q4" value="0"> Exception(); </p>

        <p><b>Что делает модификатор partial?</b></p>
        <p><input type="radio" name="q5" value="0" checked> Запрещает наследование </p>
        <p><input type="radio" name="q5" value="0"> Ограничивает видимость текущим классом </p>
        <p><input type="radio" name="q5" value="1"> Позволяет разделять сущность на несколько частей </p>
        <p><input type="radio" name="q5" value="0"> Позволяет использовать неуправляемый код </p>

        <p><b>Можно ли сделать перегрузку оператора присваивания?</b></p>
        <p><input type="radio" name="q6" value="1" checked>  Нет </p>
        <p><input type="radio" name="q6" value="0"> Да </p>

        <p><b>Тип string является значимым или ссылочным типом?</b></p>
        <p><input type="radio" name="q7" value="1" checked> Ссылочным </p>
        <p><input type="radio" name="q7" value="0"> Значимым </p>

        <p><b>Можно ли наследоваться от нескольких интерфейсов?</b></p>
        <p><input type="radio" name="q8" value="1" checked> Да </p>
        <p><input type="radio" name="q8" value="0"> Нет </p>

        <p><b>C# код компилируется в код …</b></p>
        <p><input type="radio" name="q9" value="0" checked>  CLI </p>
        <p><input type="radio" name="q9" value="1"> CIL </p>
        <p><input type="radio" name="q9" value="0"> FCL </p>
        <p><input type="radio" name="q9" value="0"> MASM </p>

        <p><b>Можно ли наследоваться от нескольких классов?</b></p>
        <p><input type="radio" name="q10" value="0" checked> Да </p>
        <p><input type="radio" name="q10" value="1"> Нет </p>

        <p><input type="submit" value="Отправить"></p>
    </form>
</div>


<!-- Модальные окна -->
<!-- Окно с обучающей информацией по модификаторам доступа -->
<div class="modal fade bd-example-modal-lg" id="studyMaterialsAccessModifiers" tabindex="-1" role="dialog" aria-labelledby="studyMaterialsAccessModifiersTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="studyMaterialsAccessModifiersTitle">Модификаторы доступа в C#</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>
                    В C# применяются следующие модификаторы доступа:
                    public;
                    private;
                    protected;
                    internal;
                    protected internal;
                    private protected;
                </p>
                <p>
                    <b>Public</b>
                    <br>
                    Публичный, общедоступный класс или член класса. Такой член класса доступен из любого места в коде, а также из других программ и сборок.
                </p>
                <p>
                    <b>Private</b>
                    <br>
                    Закрытый класс или член класса. Представляет полную противоположность модификатору public. Такой закрытый класс или член класса доступен только из кода в том же классе или контексте.
                </p>
                <p>
                    <b>Protected</b>
                    <br>
                    Такой член класса доступен из любого места в текущем классе или в производных классах. При этом производные классы могут располагаться в других сборках.
                </p>
                <p>
                    <b>Internal</b>
                    <br>
                    Класс и члены класса с подобным модификатором доступны из любого места кода в той же сборке, однако он недоступен для других программ и сборок (как в случае с модификатором public).
                </p>
                <p>
                    <b>Protected internal</b>
                    <br>
                    Совмещает функционал двух модификаторов. Классы и члены класса с таким модификатором доступны из текущей сборки и из производных классов.
                </p>
                <p>
                    <b>Private protected</b>
                    <br>
                    Такой член класса доступен из любого места в текущем классе или в производных классах, которые определены в той же сборке.
                </p>
                <p>
                    <b>Sealed</b>
                    <br>
                    При применении к классу модификатор sealed запрещает другим классам наследовать от этого класса. В следующем примере класс B наследует от класса A, но никакие классы не могут наследовать от класса B.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<!-- Окно с обучающей информацией по основным принципам ООП -->
<div class="modal fade bd-example-modal-lg" id="studyMaterialsOOPPrinciples" tabindex="-1" role="dialog" aria-labelledby="studyMaterialsOOPPrinciplesTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="studyMaterialsOOPPrinciplesTitle">Основным принципы ООП</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>
                    <b>Абстракция</b>
                    <br>
                    Абстракция — это придание объекту характеристик, которые отличают его от всех объектов, четко определяя его концептуальные границы.
                    Основная идея состоит в том, чтобы отделить способ использования составных объектов данных от деталей их реализации в виде более простых объектов, подобно тому, как функциональная абстракция разделяет
                    способ использования функции и деталей её реализации в терминах более примитивных функций, таким образом, данные обрабатываются функцией высокого уровня с помощью вызова функций низкого уровня.
                    Такой подход является основой объектно-ориентированного программирования. Это позволяет работать с объектами, не вдаваясь в особенности их реализации.
                </p>
                <p>
                    <b>Инкапсуляция</b>
                    <br>
                    Инкапсуляция — это свойство языка программирования, позволяющее пользователю не задумываться о сложности реализации используемого программного компонента (что у него внутри?), а взаимодействовать с ним
                    посредством предоставляемого интерфейса (публичных методов и членов), а также объединить и защитить жизненно важные для компонента данные. При этом пользователю предоставляется только спецификация (интерфейс) объекта.
                    Пользователь может взаимодействовать с объектом только через этот интерфейс. Реализуется с помощью ключевого слова: public.
                    Пользователь не может использовать закрытые данные и методы. Реализуется с помощью ключевых слов: private, protected, internal.))
                </p>
                <p>
                    <b>Наследование</b>
                    <br>
                    Наследование — один из четырёх важнейших механизмов объектно-ориентированного программирования, позволяющий описать новый класс на основе уже существующего (родительского),
                    при этом свойства и функциональность родительского класса заимствуются новым классом.
                    При простом наследовании класс, от которого произошло наследование, называется базовым или родительским. Классы, которые произошли от базового, называются потомками, наследниками или производными классами.
                    При множественном наследовании у класса может быть более одного предка. В этом случае класс наследует методы всех предков.
                </p>
                <p>
                    <b>Полиморфизм</b>
                    <br>
                    Полиморфизм — это возможность объектов с одинаковой спецификацией иметь различную реализацию. Кратко смысл полиморфизма можно выразить фразой: «Один интерфейс, множество реализаций».
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>